version: 2.1
executors:
  android-executor:
    docker:
      - image: circleci/android:api-28-ndk
    environment:
      GRADLE_OPTS: -Xmx2048m
  macos-executor:
    macos:
      xcode: "12.2.0"
    environment: # Disable some unnecessary homebrew operations to save time.
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
jobs:
  build-test-linux:
    docker:
      - image: matteblair/docker-tangram-linux:0.2.0
    steps:
      - checkout
      - run: git submodule update --init
      - run: apt-get update && apt-get install -y wget
      - run: make cmake-linux CMAKE_OPTIONS="-DTANGRAM_USE_SYSTEM_FONT_LIBS=1 -DTANGRAM_USE_SYSTEM_GLFW_LIBS=1 -DTANGRAM_BUILD_TESTS=1 -DTANGRAM_BUILD_BENCHMARKS=1 -GNinja"
      - run: ninja -C build/linux -j 4
      - run: source scripts/run_tests.sh build/linux ~/test-results/catch
      - store_test_results:
          path: ~/test-results
      - run: source scripts/run_bench.sh build/linux
  build-android:
    executor: android-executor
    steps:
      - checkout
      - run: git submodule update --init
      - run: cd platforms/android && ./gradlew demo:assembleDebug -Ptangram.abis=armeabi-v7a
  build-deploy-android:
    executor: android-executor
    steps:
      - checkout
      - run: git submodule update --init
      # Configure publishing credentials.
      - run: echo "$SIGNING_SECRET_KEYRING_BASE64" | base64 --decode > platforms/android/tangram/secring.gpg
      # Build and upload snapshot.
      - run: cd platforms/android && ./gradlew publish -Psigning.keyId="$SIGNING_KEY_ID" -Psigning.password="$SIGNING_PASSWORD" -Psigning.secretKeyRingFile=secring.gpg
  build-ios:
    executor: macos-executor
    steps:
      # Check out repository with submodules.
      - checkout
      - run: git submodule update --init
      # Install dependencies.
      - run: brew install cmake
      # Build test app variants. Use simulator target to bypass codesigning.
      - run: make ios-sim BUILD_TYPE=Debug
      - run: make ios-static-sim BUILD_TYPE=Debug
      - run: make ios-swift-sim BUILD_TYPE=Debug
  build-deploy-ios:
    executor: macos-executor
    steps:
      # Check out repository with submodules.
      - checkout
      - run: git submodule update --init
      # Install dependencies.
      - run: sudo gem install jazzy --no-document --version 0.10.0
      - run: brew install cmake
      # Build the framework and package it into pod.zip.
      - run: make ios-xcframework BUILD_TYPE=Release
      # Check that bitcode is included for required archs.
      - run: source scripts/check_bitcode.sh build/ios/Release/TangramMap.xcframework/ios-arm64_armv7/TangramMap.framework/TangramMap arm64 armv7
      # Build the docs and package them into docs.zip.
      - run: make ios-docs
      - run: cd build/ios-docs && zip -r ~/docs.zip .
      - store_artifacts:
          path: ~/docs.zip
      # To produce the intended structure within the zip archive, we must cd to each file's location.
      - run: cd build/ios/Release && zip -r ~/pod.zip TangramMap.xcframework
      # Add the readme and license files.
      - run: cd platforms/ios/framework && zip ~/pod.zip README.md
      - run: zip ~/pod.zip LICENSE
      - store_artifacts:
          path: ~/pod.zip
      - when:
          condition: << pipeline.git.tag >>
          steps:
            # Upload and publish the Cocoapods archive to GitHub. The download URL on GitHub uses the file name, labels have no effect.
            - run: brew install gh
            - run: mv ~/pod.zip ~/tangram-ios-<< pipeline.git.tag >>.zip
            - run: gh release upload << pipeline.git.tag >> ~/tangram-ios-<< pipeline.git.tag >>.zip
  build-macos:
    executor: macos-executor
    steps:
      # Check out repository with submodules.
      - checkout
      - run: git submodule update --init
      # Install dependencies.
      - run: brew install cmake ninja ccache
      - restore_cache:
          keys:
            - macos-ccache-v1-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
            - macos-ccache-v1-{{ .Branch }}
            - macos-ccache-v1
      # Build the MacOS demo app and package it into demo.zip
      - run: make osx MACOSX_DEPLOYMENT_TARGET=10.10.0 BUILD_TYPE=Debug CMAKE_OPTIONS="-DCMAKE_CXX_COMPILER_LAUNCHER=ccache -GNinja"
      - save_cache:
          key: macos-ccache-v1-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/Library/Caches/ccache
      # To produce the intended structure within the zip archive, we must cd to each file's location.
      - run: cd build/osx && zip -r ~/demo.zip tangram.app
      - store_artifacts:
          path: ~/demo.zip
workflows:
  version: 2
  build-and-deploy:
    jobs:
      # Run on all pushes
      - build-test-linux
      - build-macos
      # Run on pushes to all branches except main
      - build-android:
          filters:
            branches:
              ignore: main
      - build-ios:
          filters:
            branches:
              ignore: main
      # Run on pushes to main
      - build-deploy-android:
          filters:
            branches:
              only: main
      - build-deploy-ios:
          filters:
            branches:
              only: main
      # Run on tag pushes
      - build-deploy-ios:
          filters:
            # For any tag of the form 1, 1.2.3, 1.4-beta2, etc. we will deploy a release build.
            tags:
              only: /[0-9]+(\.[0-9]+)*(-beta[0-9]*)?/
            branches:
              ignore: /.*/
