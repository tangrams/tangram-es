/*
 * Copyright 2013 Chris Banes
 * Copyright 2020 Matt Blair
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'
apply plugin: 'signing'

// Components from the Android Gradle plugin are only created during the afterEvaluate phase, so
// configure publications using the afterEvaluate() lifecycle method.
// https://developer.android.com/studio/build/maven-publish-plugin
afterEvaluate { project ->

  // Configure tasks for javadoc and sources jars.

  task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    // Add Android SDK to classpath.
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    // Also add the classpath and files from a library variant (fixes Javadoc errors).
    def libraryVariantCompile = android.libraryVariants.first().javaCompileProvider.get()
    classpath += libraryVariantCompile.classpath
    classpath += libraryVariantCompile.outputs.files
    // Exclude internal dependency classes.
    exclude 'com/almeros/android/multitouch'
  }

  task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    from androidJavadocs.destinationDir
    // Add archiveClassifier so that the publishing task correctly resolves names of jar artifacts.
    archiveClassifier = 'javadoc'
  }

  task androidSourcesJar(type: Jar) {
    from android.sourceSets.main.java.sourceFiles
    // Add archiveClassifier so that the publishing task correctly resolves names of jar artifacts.
    archiveClassifier = 'sources'
  }

  publishing {
    publications {
      // Create a publication named 'maven'.
      maven(MavenPublication) {
        // Configure package information.
        groupId = project.group
        artifactId = 'tangram'
        version = project.version
        pom {
          name = 'Tangram ES'
          description = 'Tangram Android SDK'
          url = 'https://github.com/tangrams/tangram-es'
          licenses {
            license {
              name = 'The MIT License (MIT)'
              url = 'https://opensource.org/licenses/MIT'
              distribution = 'repo'
            }
          }
          developers {
            developer {
              name = 'Mapzen'
            }
          }
          scm {
            connection = 'scm:git:https://github.com/tangrams/tangram-es.git'
            developerConnection = 'scm:git:ssh://git@github.com/tangrams/tangram-es.git'
            url = 'https://github.com/tangrams/tangram-es'
          }
        }

        // Apply the component for the 'release' build variant.
        from components.release

        // Apply the sources and javadoc jars.
        artifact androidSourcesJar
        artifact androidJavadocsJar
      }
    }

    repositories {
      maven {
        name = "mavencentral"
        def releaseUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
        def snapshotUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
        url = project.version.contains('SNAPSHOT') ? snapshotUrl : releaseUrl
        credentials {
          username = project.findProperty('sonatypeUsername') ?: System.env.SONATYPE_USERNAME
          password = project.findProperty('sonatypePassword') ?: System.env.SONATYPE_PASSWORD
        }
      }
    }
  }

  signing {
    required { gradle.taskGraph.hasTask("publish") }
    sign publishing.publications.maven
  }
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}
