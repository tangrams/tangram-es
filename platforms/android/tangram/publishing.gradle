/*
 * Copyright 2013 Chris Banes
 * Copyright 2020 Matt Blair
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'

// Components from the Android Gradle plugin are only created during the afterEvaluate phase, so
// configure publications using the afterEvaluate() lifecycle method.
// https://developer.android.com/studio/build/maven-publish-plugin
afterEvaluate { project ->

  // Configure tasks for javadoc and sources jars.

  task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    // Add Android SDK to classpath.
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    // Also add the classpath and files from a library variant (fixes Javadoc errors).
    def libraryVariantCompile = android.libraryVariants.first().javaCompileProvider.get()
    classpath += libraryVariantCompile.classpath
    classpath += libraryVariantCompile.outputs.files
    // Exclude internal dependency classes.
    exclude 'com/almeros/android/multitouch'
  }

  task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    from androidJavadocs.destinationDir
    // Add archiveClassifier so that the publishing task correctly resolves names of jar artifacts.
    archiveClassifier = 'javadoc'
  }

  task androidSourcesJar(type: Jar) {
    from android.sourceSets.main.java.sourceFiles
    // Add archiveClassifier so that the publishing task correctly resolves names of jar artifacts.
    archiveClassifier = 'sources'
  }

  publishing {
    publications {
      // Create a publication named 'maven'.
      maven(MavenPublication) {
        // Configure package information.
        groupId = GROUP
        artifactId = POM_ARTIFACT_ID
        version = VERSION_NAME
        pom {
          name = POM_NAME
          description = POM_DESCRIPTION
          url = POM_URL
          licenses {
            license {
              name = POM_LICENSE_NAME
              url = POM_LICENSE_URL
              distribution = POM_LICENSE_DIST
            }
          }
          developers {
            developer {
              name = POM_DEVELOPER_NAME
            }
          }
          scm {
            connection = POM_SCM_CONNECTION
            developerConnection = POM_SCM_DEV_CONNECTION
            url = POM_SCM_URL
          }
        }

        // Apply the component for the 'release' build variant.
        from components.release

        // Apply the sources and javadoc jars.
        artifact androidSourcesJar
        artifact androidJavadocsJar
      }
    }

    repositories {
      maven {
        // Publish releases to Bintray and snapshots to OJO.
        def releaseUrl = 'https://api.bintray.com/maven/tangrams/maven/tangram/'
        def snapshotUrl = 'https://oss.jfrog.org/artifactory/oss-snapshot-local/'
        url = VERSION_NAME.contains('SNAPSHOT') ? snapshotUrl : releaseUrl
        credentials {
          username = project.hasProperty('bintrayUsername') ? bintrayUsername : System.env.BINTRAY_USERNAME
          password = project.hasProperty('bintrayApiKey') ? bintrayApiKey : System.env.BINTRAY_API_KEY
        }
      }
    }
  }
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}
