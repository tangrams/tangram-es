apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

group = GROUP
version = VERSION_NAME

apply from: 'versioning.gradle'
apply from: 'profiling.gradle'

android {
  compileSdkVersion 28

  // Specific ABI targets can be chosen with the 'abis' property as a comma-separated list of ABIs.
  // From the command line, add '-Ptangram.abis=armeabi-v7a,x86,...' to only build those ABIs.
  // When building from Android Studio, the ABI for the target device is injected and takes precedence.
  def abi = 'all'
  if (!project.hasProperty('android.injected.invoked.from.ide') && project.hasProperty('tangram.abis')) {
    abi = project.getProperty('tangram.abis')
  }

  defaultConfig {
    minSdkVersion 16
    targetSdkVersion 28
    versionCode buildVersionCode()
    versionName VERSION_NAME
    consumerProguardFiles 'tangram-proguard-rules.txt'
    externalNativeBuild {
      cmake {
        targets 'tangram'
        arguments '-DTANGRAM_PLATFORM=android',
                  '-DANDROID_STL=c++_shared',
                  '-DCMAKE_BUILD_TYPE=Release'
        cppFlags '-std=c++14',
                 '-fvisibility=hidden', // export only JNIEXPORT
                 '-pedantic',
                 '-fPIC',
                 '-fexceptions',
                 '-frtti',
                 // linker
                 '-Wl,--exclude-libs,ALL', // dont export static lib symbols
                 //warnings
                 '-Wall',
                 '-Wignored-qualifiers',
                 '-Wtype-limits',
                 '-Wno-missing-field-initializers',
                 '-Wno-format-pedantic',
                 '-Wno-gnu-statement-expression',
                 '-Wno-gnu-anonymous-struct',
                 '-Wno-nested-anon-types',
                 '-Wno-unused-command-line-argument', // for -Wl linker flags..
                 '-Wno-unknown-warning-option'

        if (abi == 'all') {
          abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86'
        } else {
          abiFilters abi.split(',')
        }

      }
    }
  }

  externalNativeBuild {
    cmake {
      path '../../../CMakeLists.txt'
    }
  }

  buildTypes {
    debug {
      externalNativeBuild {
        cmake.cppFlags '-g'
      }
    }
    release {
      externalNativeBuild {
        cmake.cppFlags'-g0'
      }
    }
  }
}

dependencies {
  api 'com.squareup.okhttp3:okhttp:3.12.0'
  implementation 'com.android.support:support-annotations:27.1.1'
}

apply from: 'publishing.gradle'
