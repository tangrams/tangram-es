apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

group = GROUP
version = VERSION_NAME
description = POM_DESCRIPTION

apply from: 'versioning.gradle'

android {
  compileSdkVersion 26

  defaultConfig {
    minSdkVersion 15
    targetSdkVersion 26
    versionCode buildVersionCode()
    versionName VERSION_NAME
    consumerProguardFiles 'tangram-proguard-rules.txt'
    externalNativeBuild {
      cmake {
        targets 'tangram'
        arguments '-DPLATFORM_TARGET=android',
                  '-DANDROID_TOOLCHAIN=clang',
                  '-DANDROID_STL=c++_shared'
        cppFlags '-std=c++14',
                 '-pedantic',
                 '-fPIC',
                 '-fexceptions',
                 '-frtti',
                 //warnings
                 '-Wall',
                 '-Wignored-qualifiers',
                 '-Wtype-limits',
                 '-Wmissing-field-initializers',
                 '-Wno-format-pedantic'

        abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86'
      }
    }
  }

  externalNativeBuild {
    cmake {
      path '../../../CMakeLists.txt'
    }
  }

  buildTypes {
    debug {
      externalNativeBuild {
        cmake.cppFlags '-g'
      }
    }
    release {
      externalNativeBuild {
        cmake.cppFlags'-g0'
      }
    }
  }
}

dependencies {
  api 'com.squareup.okhttp3:okhttp:3.9.1'
  implementation 'com.android.support:support-annotations:26.1.0'
}

// Create tasks for Android artifacts.

task androidSourcesJar(type: Jar) {
  classifier = 'sources'
  from android.sourceSets.main.java.srcDirs
}

task androidJavadocs(type: Javadoc) {
  source = android.sourceSets.main.java.srcDirs
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  exclude 'com/almeros/android/multitouch'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
  classifier = 'javadoc'
  from androidJavadocs.destinationDir
}

// Configure Maven publication.
// Based on example from https://github.com/JFrogDev/project-examples/blob/master/gradle-examples/gradle-android-example/build.gradle

def pomConfig = {
  name POM_NAME
  description POM_DESCRIPTION
  url POM_URL
  scm {
    url POM_SCM_URL
  }
  developers {
    developer {
      id POM_DEVELOPER_ID
      name POM_DEVELOPER_NAME
    }
  }
  licenses {
    license {
      name POM_LICENCE_NAME
      url POM_LICENCE_URL
      distribution POM_LICENCE_DIST
    }
  }
}

publishing {
  publications {
    aar(MavenPublication) {
      groupId GROUP
      artifactId POM_ARTIFACT_ID
      version VERSION_NAME
      // Tell maven to prepare the generated AAR file for publishing.
      artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
      artifact(androidSourcesJar)
      artifact(androidJavadocsJar)
      // Configure the POM file.
      pom.withXml {
        // Add our POM info from the closure above.
        asNode().children().last() + pomConfig
        // Add our dependencies, as required by Maven Central.
        def dependencies = asNode().appendNode('dependencies')
        configurations.implementation.allDependencies.each {
          if (it.name != 'unspecified') {
            def dependency = dependencies.appendNode('dependency')
            dependency.appendNode('groupId', it.group)
            dependency.appendNode('artifactId', it.name)
            dependency.appendNode('version', it.version)
          }
        }
      }
    }
  }
}

// Configure Artifactory upload.
// Plugin documentation: https://www.jfrog.com/confluence/display/RTF/Gradle+Artifactory+Plugin

artifactoryPublish {
  dependsOn('build')
  publications(publishing.publications.aar)
}

artifactory {
  def username = project.hasProperty('artifactoryUsername') ? artifactoryUsername : System.getenv('ARTIFACTORY_USERNAME')
  def password = project.hasProperty('artifactoryPassword') ? artifactoryPassword : System.getenv('ARTIFACTORY_PASSWORD')

  clientConfig.publisher.username = "$username"
  clientConfig.publisher.password = "$password"

  contextUrl = 'https://oss.jfrog.org/artifactory'
  publish {
    repository {
      repoKey = 'oss-snapshot-local' // The Artifactory repository key to publish to
    }
    defaults {
      // Tell the Artifactory plugin whether to publish the publications defined in the build script.
      publishArtifacts = true
      publishPom = true // Publish generated POM files to Artifactory (true by default)
    }
  }
  resolve {
    repoKey = 'jcenter'
  }
}
